name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Maven
        run: mvn -B clean verify --file backend/pom.xml
      - name: Upload backend JAR
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: backend/target/backend-0.0.1-SNAPSHOT.jar

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: cd frontend && npm install
      - name: Build frontend
        run: cd frontend && npm run build
      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

  dockerize:
    needs: [build-backend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download backend JAR
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: backend/target
      - name: Build Docker image
        run: docker build -t gpt-wrapper-backend ./backend
      - name: Save Docker image
        run: docker save gpt-wrapper-backend:latest -o gpt-wrapper-backend.tar
      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: gpt-wrapper-backend-image
          path: gpt-wrapper-backend.tar

  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [dockerize, build-frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check for backend or terraform changes
        id: backend_changes
        run: |
          git fetch origin main
          if git diff --name-only origin/main...${{ github.sha }} -- 'backend/**' 'terraform/**' | grep .; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
      - name: Check for frontend or terraform changes
        id: frontend_changes
        run: |
          git fetch origin main
          if git diff --name-only origin/main...${{ github.sha }} -- 'frontend/**' 'terraform/**' | grep .; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
      - name: Download backend JAR
        if: steps.backend_changes.outputs.changed == 'true'
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: backend/target
      - name: Download Docker image
        if: steps.backend_changes.outputs.changed == 'true'
        uses: actions/download-artifact@v4
        with:
          name: gpt-wrapper-backend-image
          path: .
      - name: Load Docker image
        if: steps.backend_changes.outputs.changed == 'true'
        run: docker load -i gpt-wrapper-backend.tar
      - name: Download frontend build
        if: steps.frontend_changes.outputs.changed == 'true'
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist
      - name: Set up Terraform
        if: steps.backend_changes.outputs.changed == 'true' || steps.frontend_changes.outputs.changed == 'true'
        uses: hashicorp/setup-terraform@v3
      - name: Configure AWS credentials
        if: steps.backend_changes.outputs.changed == 'true' || steps.frontend_changes.outputs.changed == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: Terraform Init
        if: steps.backend_changes.outputs.changed == 'true' || steps.frontend_changes.outputs.changed == 'true'
        run: terraform -chdir=terraform init
      - name: Terraform Apply
        if: steps.backend_changes.outputs.changed == 'true' || steps.frontend_changes.outputs.changed == 'true'
        run: terraform -chdir=terraform apply -auto-approve
      - name: Login to Amazon ECR
        if: steps.backend_changes.outputs.changed == 'true'
        run: |
          aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-central-1.amazonaws.com
      - name: Tag Docker image
        if: steps.backend_changes.outputs.changed == 'true'
        run: |
          docker tag gpt-wrapper-backend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-central-1.amazonaws.com/gpt-wrapper-backend:latest
      - name: Push Docker image to ECR
        if: steps.backend_changes.outputs.changed == 'true'
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-central-1.amazonaws.com/gpt-wrapper-backend:latest
      - name: Upload Frontend to S3
        if: steps.frontend_changes.outputs.changed == 'true'
        run: |
          aws s3 sync frontend/dist s3://${{ secrets.FRONTEND_BUCKET }}/ --delete
